I"<h2 id="leetcode刷题">leetcode刷题</h2>
<h2 id="目录">目录</h2>
<ul>
  <li><a href="#对称的二叉树">28. 对称的二叉树</a>
    <h2 id="对称的二叉树">对称的二叉树</h2>
    <h3 id="请实现一个函数用来判断一棵二叉树是不是对称的如果一棵二叉树和它的镜像一样那么它是对称的">请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</h3>
    <p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>
  </li>
</ul>

<blockquote>
  <p>解题思路: <br />
递归判断,根据对称判断root的left==right，在判断left-&gt;left==right-&gt;right &amp;&amp; left-&gt;right==right-&gt;left</p>
</blockquote>

<h5 id="算法流程">算法流程</h5>
<p><strong>isSymmetric</strong>:</p>
<ul>
  <li>特例处理:若根节点root为空,返回true.</li>
  <li>返回值: compare(root.left,root.right);</li>
</ul>

<p><strong>compare(left,right)</strong>:</p>
<ul>
  <li>
    <p>条件处理<br />
1.若left==NULL,right==NULL返回true <br />
2.当只有left，right中的一个为NULL,返回false;</p>
  </li>
  <li>
    <p>返回值:返回compare(left.left,right.right)&amp;&amp;compare(left.right,right.left)</p>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">bool</span> <span class="nf">compare</span><span class="p">(</span><span class="k">struct</span> <span class="n">TreeNode</span><span class="o">*</span><span class="n">left</span><span class="p">,</span><span class="k">struct</span> <span class="n">TreeNode</span><span class="o">*</span><span class="n">right</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">((</span><span class="o">!</span><span class="n">left</span><span class="o">&amp;&amp;</span><span class="n">right</span><span class="p">)</span> <span class="o">||</span><span class="p">(</span><span class="n">left</span><span class="o">&amp;&amp;!</span><span class="n">right</span><span class="p">))</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">left</span><span class="o">&amp;&amp;!</span><span class="n">right</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="c1">// else</span>
    <span class="c1">//     return false;</span>
    <span class="c1">// if(left-&gt;val != right-&gt;val)</span>
    <span class="c1">//     return false;</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">val</span><span class="o">==</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">compare</span><span class="p">(</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">compare</span><span class="p">(</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">bool</span> <span class="nf">isSymmetric</span><span class="p">(</span><span class="k">struct</span> <span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">root</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">compare</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
<span class="p">}</span> </code></pre></figure>
:ET